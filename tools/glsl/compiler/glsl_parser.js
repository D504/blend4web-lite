module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart, pp_start: peg$parsepp_start },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = function(tu) { 
            var data = {
              node_with_node_condition: _pp_node_with_node_condition,
              vardef_ids: _pp_vardef_identifiers,
              uid_to_nodes: _uid_to_node,
            }
            
            if (!tu)
              tu = [];
            
            data.ast = parenting_unit(common_node({
              node: "root",
              parts: tu,
              after_comments: []
            }));

            for (var i = 0; i < _pp_insertions_array.length; i++) 
              data.ast.after_comments.push(_pp_insertions_array[i][1]);

            return data;
          },
        peg$c1 = function(left, right) { 
            var parts = [left];
            parts.push.apply(parts, right[0]);

            return parts;
          },
        peg$c2 = function() { return [] },
        peg$c3 = function(decl) { 
            return common_node({
              node: "external_declaration",
              decl: decl
            });
          },
        peg$c4 = function(func, s) {
            return common_node({
              node: "function_declaration",
              function: func,
              punctuation: {
                semicolon: s
              }
            });
          },
        peg$c5 = function(list, s) { 
            return common_node({
              node: "init_declarator_list",
              list: list,
              punctuation: {
                semicolon: s
              }
            });
          },
        peg$c6 = function(key_precision, pq, type, s) { 
            return common_node({
              node: "precision_declaration",
              precision: pq,
              type: type,
              punctuation: {
                semicolon: s
              },
              keywords: {
                key_precision: key_precision
              }
            });
          },
        peg$c7 = function(lb, exp, rb) { return [0, exp, { left_bracket: lb, right_bracket: rb }] },
        peg$c8 = function(op, init) { return [1, init, op] },
        peg$c9 = function(first, others) { 
            var decl_list = {
              node: "declarator_list"
            }
            var vars = []
            vars.push(first);

            for (var i = 0; i < others.length; i++) {
              var v = {};
              v.node = "single_declaration_line";
              v.punctuation = { comma: others[i][1] };
              v.identifier = others[i][3];
              v.identifier.is_declaration = true;
              if (others[i][4]) {
                var s_case = others[i][4][0];
                var s_node = others[i][4][1];

                switch (s_case) {
                case 0:
                  v.identifier.type = "array";
                  v.identifier.array_size = s_node;
                  v.identifier.punctuation = others[i][4][2];
                  break;
                case 1:
                  v.initializer = s_node;
                  v.operation = others[i][4][2];
                  break;
                }
              }
              vars.push(common_node(v));
            }
            decl_list.vars = vars;
            return common_node(decl_list);
          },
        peg$c10 = function(key_invariant, id) {
            return common_node({
              node: "single_declaration",
              keywords: {
                key_invariant: key_invariant
              },
              subtype: "invariant",
              identifier: id
            });
          },
        peg$c11 = function(type, id) { 
            var decl = {
              node: "single_declaration",
              subtype: "simple",
              type: type
            }
            if (id) {
              decl.identifier = id[1];
              decl.identifier.is_declaration = true;
              if (id[2]) {
                var s_case = id[2][0];
                var s_node = id[2][1];
                switch (s_case) {
                case 0:
                  decl.identifier.type = "array";
                  decl.identifier.array_size = s_node;
                  decl.identifier.punctuation = id[2][2];
                  break;
                case 1:
                  decl.initializer = s_node;
                  decl.operation = id[2][2];
                  break;
                }
              }
            }

            return common_node(decl);
          },
        peg$c12 = function(head, scope) {
            return common_node({
              node: "function_definition",
              head: head,
              scope: scope
            });
          },
        peg$c13 = function(type, id) {
            id.is_declaration = true;
            return common_node({
              node: "function_head",
              type: type,
              identifier: id
            });
          },
        peg$c14 = function(parms, body) {
            return common_node({
              node: "function_scope",
              parameters: parms,
              body: body,
              new_scope: true
            });
          },
        peg$c15 = function(first, others) { return { first: first, others: others } },
        peg$c16 = "",
        peg$c17 = function(lp, parms, rp) {
            parm_node = {
              node: "function_parameters",
              parameters: [],
              punctuation: {
                left_paren: lp,
                right_paren: rp,
              }
            };
            if (parms.first) {
              parm_node.parameters = [parms.first];
              for (var i = 0; i < parms.others.length; i++) {
                var parm = parms.others[i][3];
                parm.punctuation = { comma: parms.others[i][1] };
                parm_node.parameters.push(parm);
              }
            }

            return common_node(parm_node);
          },
        peg$c18 = function(head, parms) {
            parms.new_scope = true;
            return common_node({
              node: "function_declarator",
              head: head,
              parameters: parms
            });
          },
        peg$c19 = function(tq, pq, parm) {
            var parm_node = {
              node: "parameter_declaration",
              parameter: parm
            }
            if (tq)
              parm_node.type_qualifier = tq[0];
            if (pq)
              parm_node.parameter_qualifier = pq[0];

            return common_node(parm_node);
          },
        peg$c20 = function(type, id, arr) {
            id.is_declaration = true;
            var parm_node = {
              node: "parameter_declarator",
              type: type,
              identifier: id
            }
            if (arr) {
              parm_node.identifier.type = "array";
              parm_node.identifier.array_size = arr[3];
              parm_node.identifier.punctuation = {
                left_bracket: arr[1],
                right_bracket: arr[5]
              };
            }
            return common_node(parm_node);
          },
        peg$c21 = function(func) { 
            return common_node({
              node: "function_call",
              identifier: func.identifier,
              parameters: func.parameters,
              punctuation: func.punctuation
            });
          },
        peg$c22 = function(id, rp) {
            return {
              identifier: id,
              parameters: [],
              punctuation: {
                right_paren: rp
              }
            }
          },
        peg$c23 = function(id, parms, rp) {
            var parameters = [parms[0]];
            for (var i = 0; i < parms[1].length; i++) {
              var parm = parms[1][i][3];
              if (!parm.punctuation)
                parm.punctuation = {};
              parm.punctuation.comma = parms[1][i][1];
              parameters.push(parm);
            }

            return {
              identifier: id,
              parameters: parameters,
              punctuation: {
                right_paren: rp
              }
            }
          },
        peg$c24 = function(id, lp) { 
            id.punctuation = {
              left_paren: lp
            };
            return id;
          },
        peg$c25 = function(identifier) { return identifier },
        peg$c26 = function(key_struct, id, lb, list, rb) {
            var struct_node = {
              node: "struct_specifier",
              declaration_list: list,
              punctuation: {
                left_brace: lb,
                right_brace: rb
              },
              keywords: {
                key_struct: key_struct
              }
            }
            if (id) {
              id.is_declaration = true;
              struct_node.struct_type = id[1];
            }

            return common_node(struct_node);
          },
        peg$c27 = function(decl) { return decl },
        peg$c28 = function(list) {
            return common_node({
              node: "struct_declaration_list",
              list: list,
              new_scope: true
            });
          },
        peg$c29 = function(type, list, s) {
            var st_node = {
              node: "struct_declaration",
              type: type,
              declarator_list: list,
              punctuation: {
                semicolon: s
              }
            };

            for (var i = 0; i < st_node.declarator_list.list.length; i++)
              st_node.declarator_list.list[i].type = type;

            return common_node(st_node);
          },
        peg$c30 = function(first, others) {
            var declarations = [first];
            if (others.length > 0) {
              for (var i = 0; i < others.length; i++) {
                var decl = others[i][3];
                if (!decl.punctuation)
                  decl.punctuation = {};
                decl.punctuation.comma = others[i][1];
                declarations.push(decl);
              }
            }

            return common_node({
              node: "struct_declarator_list",
              list: declarations,
            });
          },
        peg$c31 = function(id, exp) {
            id.is_declaration = true;
            if (exp) {
              id.type = "array";
              id.array_size = exp[3];
              id.punctuation = {
                left_bracket: exp[1],
                right_bracket: exp[5]
              }
            }
            return common_node({
              node: "struct_declarator",
              identifier: id
            });
          },
        peg$c32 = function(c, e) { e.punctuation = { comma: c }; return e },
        peg$c33 = function(left, right) {
            var exp_list = [left];

            if (right.length > 0)
              exp_list.push.apply(exp_list, right);
            return common_node({
              node: "expression",
              list: exp_list
            });
          },
        peg$c34 = function(left, op, right) { 
            return common_node({
              node: "assignment_expression",
              left: left,
              operator: op,
              right: right
            });
          },
        peg$c35 = function(left) { 
            return common_node({
              node: "assignment_expression",
              left: left,
              operator: null,
              right: null
            });
          },
        peg$c36 = function(left, right) {
            if (right)
              return common_node({
                node: "conditional_expression",
                condition: left,
                if_true: right[3],
                if_false: right[7],
                punctuation: {
                  question: right[1],
                  colon: right[5]
                }
              });
            else
              return common_node({
                node: "conditional_expression",
                condition: left,
                if_true: null,
                if_false: null,
                punctuation: {
                  question: null,
                  colon: null
                }
              });
          },
        peg$c37 = function(op, exp) { return [op,exp] },
        peg$c38 = function(left, right) {
            if (right.length > 0)
              return binary_chain_node("logical_or_expression", left, right);
            else
              return left;
          },
        peg$c39 = function(left, right) {
            if (right.length > 0)
              return binary_chain_node("logical_xor_expression", left, right);
            else
              return left;
          },
        peg$c40 = function(left, right) {
            if (right.length > 0)
              return binary_chain_node("logical_and_expression", left, right);
            else
              return left;
          },
        peg$c41 = function(left, right) {
            if (right.length > 0)
              return binary_chain_node("equality_expression", left, right);
            else
              return left;
          },
        peg$c42 = function(left, right) {
            if (right.length > 0)
              return binary_chain_node("relational_expression", left, right);
            else
              return left;
          },
        peg$c43 = function(left, right) {
            if (right.length > 0)
              return binary_chain_node("additive_expression", left, right);
            else
              return left;
          },
        peg$c44 = function(left, right) {
            if (right.length > 0)
              return binary_chain_node("multiplicative_expression", left, right);
            else
              return left;
          },
        peg$c45 = function(op, exp) { 
            return common_node({
              node: "prefix_expression",
              operator: op,
              expression: exp
            });
          },
        peg$c46 = function(lb, token, rb) { 
                  return common_node({
                    node: "index_accessor",
                    index: token,
                    punctuation: {
                      left_bracket: lb,
                      right_bracket: rb
                    }
                  });
                },
        peg$c47 = function(op) { return op },
        peg$c48 = function(left, right) { 
            if (right.length > 0)
              return unary_chain_node("postfix_expression", left, right);
            else
              return left;
          },
        peg$c49 = function(exp) {
            var p_node = {
              
            }

            if (exp.node == "identifier")
              p_node.identifier = exp;
            else
              p_node.exp = exp;
            
            return common_node({
              node: "primary_expression",
              expression: exp
            });
          },
        peg$c50 = function(lp, exp, rp) {
            return common_node({
              node: "paren_expression",
              expression: exp,
              punctuation: {
                left_paren: lp,
                right_paren: rp
              }
            });
          },
        peg$c51 = function(lb, list, rb) {
            return common_node({
              node: "compound_statement_no_new_scope",
              list: list,
              punctuation: {
                left_brace: lb,
                right_brace: rb
              }
            });
          },
        peg$c52 = function(s) { return s; },
        peg$c53 = function(list) { 
            var node = common_node({
              node: "statement_list",
              list: list
            });
            return node;
          },
        peg$c54 = function(stat) {
            return common_node({
              node: "statement_no_new_scope",
              statement: stat
            });
          },
        peg$c55 = function(lb, list, rb) {
            return common_node({
              node: "compound_statement_with_scope",
              list: list,
              punctuation: {
                left_brace: lb,
                right_brace: rb
              },
              new_scope: true,
              without_braces: false
            });
          },
        peg$c56 = function(stat) {
            return common_node({
              node: "simple_statement",
              statement: stat
            });
          },
        peg$c57 = function(decl) {
            return common_node({
              node: "declaration_statement",
              statement: decl
            });
          },
        peg$c58 = function(exp, s) { 
            var e_node = {
              node: "expression_statement",
              punctuation: {
                semicolon: s
              }
            }

            e_node.statement = (exp) ? exp[0] : null;
            return common_node(e_node);
          },
        peg$c59 = function(key_if, lp, exp, rp, srs) {
            var sel_node = {
              node: "selection_statement",
              expression: exp,
              if_actions: srs.if_actions,
              punctuation: {
                left_paren: lp,
                right_paren: rp
              },
              keywords: {
                key_if: key_if
              }
            }

            if (srs.else_actions) {
              sel_node.else_actions = srs.else_actions;
              sel_node.keywords.key_else = srs.keywords.key_else;
            }

            return common_node(sel_node);
          },
        peg$c60 = function(if_act, else_act) {
            var sel_node = {
              node: "selection_rest_statement",
              if_actions: if_act
            };

            if (else_act) {
              sel_node.else_actions = else_act[3];
              sel_node.keywords = { key_else: else_act[1] };
            }

            return common_node(sel_node);
          },
        peg$c61 = function(stat) {
            return common_node({
              node: "statement_with_scope",
              statement: stat,
              new_scope: true
            });
          },
        peg$c62 = function(key_while, lp, cond, rp, body) {
            return common_node({
              node: "iteration_statement",
              type: "while",
              condition: cond,
              body: body,
              punctuation: {
                left_paren: lp,
                right_paren: rp
              },
              keywords: {
                key_while: key_while
              },
              new_scope: true
            });
          },
        peg$c63 = function(key_do, body, key_while, lp, cond, rp, s) {
            return common_node({
              node: "iteration_statement",
              type: "do_while",
              body: (body) ? body : null,
              condition: cond,
              punctuation: {
                left_paren: lp,
                right_paren: rp,
                semicolon: s
              },
              keywords: {
                key_do: key_do,
                key_while: key_while
              },
              new_scope: true
            });
          },
        peg$c64 = function(key_for, lp, fis, frs, rp, body) {
            return common_node({
              node: "iteration_statement",
              type: "for_loop",
              for_init_statement: (fis) ? fis : null,
              for_rest_statement: (frs) ? frs : null,
              body: body,
              punctuation: {
                left_paren: lp,
                right_paren: rp
              },
              keywords: {
                key_for: key_for
              },
              new_scope: true
            });
          },
        peg$c65 = function(type, id, op, init) {
                id.is_declaration = true;
                return common_node({
                  node: "condition_initializer",
                  identifier: id,
                  id_type: type,
                  initializer: init,
                  operation: op
                });
              },
        peg$c66 = function(cond) {
            return common_node({
              node: "condition",
              condition: cond
            });
          },
        peg$c67 = function(stat) {
            if (stat)
              return common_node({
                node: "for_init_statement",
                statement: stat
              });
            else
              return stat;
          },
        peg$c68 = function(cond, s, exp) {
            var condition = (cond) ? cond: null;
            var expression = (exp) ? exp: null;

            return common_node({
              node: "for_rest_statement",
              condition: condition,
              expression: expression,
              punctuation: {
                semicolon: s
              }
            });
          },
        peg$c69 = function(jump, s) { 
            return  common_node({
              node: "jump_statement",
              type: jump,
              punctuation: {
                semicolon: s
              }
            });
          },
        peg$c70 = function(jump, exp, s) { 
            return common_node({
              node: "jump_statement",
              type: jump,
              returned_exp: exp,
              punctuation: {
                semicolon: s
              }
            });
          },
        peg$c71 = function(prec, spec) {
            var type_spec = {
              node: "type_specifier",
              type_specifier: spec
            }
            if (prec)
              type_spec.precision = prec[0];

            return common_node(type_spec);
          },
        peg$c72 = function(type, ext) {
            var type_node =  {
              node: "parameter_type_specifier",
              type: type
            };
            if (ext) {
              type_node.array_size = ext[3];
              type_node.punctuation = {
                left_bracket: ext[1],
                right_bracket: ext[5]        
              }
            }

            return common_node(type_node);
          },
        peg$c73 = function(qual, spec) { 
            var type_node = {
              node: "fully_specified_type",
              type_specifier: spec.type_specifier,
            };

            if (spec.precision)
              type_node.precision_qualifier = spec.precision;
            if (qual)
              type_node.type_qualifier = qual[0];

            return common_node(type_node);
          },
        peg$c74 = function(value) { return [value[0], value[2]] },
        peg$c75 = function(value) { 
          return common_node({
            node: "type_qualifier",
            value: value
          });
        },
        peg$c76 = function(value) { 
          return common_node({
            node: "parameter_qualifier",
            value: value
          });
        },
        peg$c77 = function(value) { 
          return common_node({
            node: "precision_qualifier",
            value: value
          });
        },
        peg$c78 = function(name) { 
          return common_node({
            node: "type_specifier_no_prec",
            name: name
          });
        },
        peg$c79 = function(name) {
            return common_node({
              node: "identifier",
              name: name
            });
          },
        peg$c80 = function(id) { 
            var chars = [];
            chars.push.apply(chars, id[0]);
            chars.push.apply(chars, id[1]);
            var name = chars.join("");

            return common_node({
              node: "identifier",
              name: name
            });
          },
        peg$c81 = function(id) { 
              return common_node({
                node: "struct_type",
                identifier: id
              });
            },
        peg$c82 = function(token) { 
            var value = token.join("");
            return common_node({
              node: "float_constant",
              value: value
            });
          },
        peg$c83 = function(value) { 
            return common_node({
              node: "integer_constant",
              value: value
            });
          },
        peg$c84 = "true",
        peg$c85 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c86 = "false",
        peg$c87 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c88 = function(value) { 
            return common_node({
              node: "bool_constant",
              value: value == "true"
            });
          },
        peg$c89 = function(d, id) { 
            return common_node({
              node: "field_selection",
              identifier: id,
              punctuation: {
                dot: d
              }
            });
          },
        peg$c90 = function(id) { var name = id[0].concat(id[1]).join(""); return token_is_reserved(name); },
        peg$c91 = function(id) { 
            var chars = [];
            chars.push.apply(chars, id[0]);
            chars.push.apply(chars, id[1]);
            return chars.join("");
          },
        peg$c92 = "+",
        peg$c93 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c94 = function(token) { return operation_node("addition", token) },
        peg$c95 = "-",
        peg$c96 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c97 = function(token) { return operation_node("subtraction", token) },
        peg$c98 = "*",
        peg$c99 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c100 = function(token) { return operation_node("multiply", token) },
        peg$c101 = "/",
        peg$c102 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c103 = function(token) { return operation_node("division", token) },
        peg$c104 = "++",
        peg$c105 = { type: "literal", value: "++", description: "\"++\"" },
        peg$c106 = function(token) { return operation_node("increment", token) },
        peg$c107 = "--",
        peg$c108 = { type: "literal", value: "--", description: "\"--\"" },
        peg$c109 = function(token) { return operation_node("decrement", token) },
        peg$c110 = "=",
        peg$c111 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c112 = function(token) { return operation_node("equal", token) },
        peg$c113 = "*=",
        peg$c114 = { type: "literal", value: "*=", description: "\"*=\"" },
        peg$c115 = function(token) { return operation_node("mul_assign", token) },
        peg$c116 = "/=",
        peg$c117 = { type: "literal", value: "/=", description: "\"/=\"" },
        peg$c118 = function(token) { return operation_node("div_assign", token) },
        peg$c119 = "+=",
        peg$c120 = { type: "literal", value: "+=", description: "\"+=\"" },
        peg$c121 = function(token) { return operation_node("add_assign", token) },
        peg$c122 = "-=",
        peg$c123 = { type: "literal", value: "-=", description: "\"-=\"" },
        peg$c124 = function(token) { return operation_node("sub_assign", token) },
        peg$c125 = "<",
        peg$c126 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c127 = function(token) { return operation_node("less", token) },
        peg$c128 = ">",
        peg$c129 = { type: "literal", value: ">", description: "\">\"" },
        peg$c130 = function(token) { return operation_node("greater", token) },
        peg$c131 = "==",
        peg$c132 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c133 = "<=",
        peg$c134 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c135 = function(token) { return operation_node("less_equal", token) },
        peg$c136 = ">=",
        peg$c137 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c138 = function(token) { return operation_node("greater_equal", token) },
        peg$c139 = "!",
        peg$c140 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c141 = function(token) { return operation_node("not", token) },
        peg$c142 = "!=",
        peg$c143 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c144 = function(token) { return operation_node("not_equal", token) },
        peg$c145 = "&&",
        peg$c146 = { type: "literal", value: "&&", description: "\"&&\"" },
        peg$c147 = function(token) { return operation_node("and", token) },
        peg$c148 = "||",
        peg$c149 = { type: "literal", value: "||", description: "\"||\"" },
        peg$c150 = function(token) { return operation_node("or", token) },
        peg$c151 = "^^",
        peg$c152 = { type: "literal", value: "^^", description: "\"^^\"" },
        peg$c153 = function(token) { return operation_node("xor", token) },
        peg$c154 = "~",
        peg$c155 = { type: "literal", value: "~", description: "\"~\"" },
        peg$c156 = function(token) { return operation_node("tilde", token) },
        peg$c157 = "%",
        peg$c158 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c159 = function(token) { return operation_node("percent", token) },
        peg$c160 = "<<",
        peg$c161 = { type: "literal", value: "<<", description: "\"<<\"" },
        peg$c162 = function(token) { return operation_node("left_shift", token) },
        peg$c163 = ">>",
        peg$c164 = { type: "literal", value: ">>", description: "\">>\"" },
        peg$c165 = function(token) { return operation_node("right_shift", token) },
        peg$c166 = "&",
        peg$c167 = { type: "literal", value: "&", description: "\"&\"" },
        peg$c168 = function(token) { return operation_node("ampersand", token) },
        peg$c169 = "^",
        peg$c170 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c171 = function(token) { return operation_node("caret", token) },
        peg$c172 = "|",
        peg$c173 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c174 = function(token) { return operation_node("vertical_bar", token) },
        peg$c175 = "%=",
        peg$c176 = { type: "literal", value: "%=", description: "\"%=\"" },
        peg$c177 = function(token) { return operation_node("mod_assign", token) },
        peg$c178 = "<<=",
        peg$c179 = { type: "literal", value: "<<=", description: "\"<<=\"" },
        peg$c180 = function(token) { return operation_node("left_shift_assign", token) },
        peg$c181 = ">>=",
        peg$c182 = { type: "literal", value: ">>=", description: "\">>=\"" },
        peg$c183 = function(token) { return operation_node("right_shift_assign", token) },
        peg$c184 = "&=",
        peg$c185 = { type: "literal", value: "&=", description: "\"&=\"" },
        peg$c186 = function(token) { return operation_node("and_assign", token) },
        peg$c187 = "^=",
        peg$c188 = { type: "literal", value: "^=", description: "\"^=\"" },
        peg$c189 = function(token) { return operation_node("xor_assign", token) },
        peg$c190 = "|=",
        peg$c191 = { type: "literal", value: "|=", description: "\"|=\"" },
        peg$c192 = function(token) { return operation_node("or_assign", token) },
        peg$c193 = "const",
        peg$c194 = { type: "literal", value: "const", description: "\"const\"" },
        peg$c195 = function(data) { return keyword_node(data) },
        peg$c196 = "uniform",
        peg$c197 = { type: "literal", value: "uniform", description: "\"uniform\"" },
        peg$c198 = "break",
        peg$c199 = { type: "literal", value: "break", description: "\"break\"" },
        peg$c200 = "continue",
        peg$c201 = { type: "literal", value: "continue", description: "\"continue\"" },
        peg$c202 = "do",
        peg$c203 = { type: "literal", value: "do", description: "\"do\"" },
        peg$c204 = "for",
        peg$c205 = { type: "literal", value: "for", description: "\"for\"" },
        peg$c206 = "while",
        peg$c207 = { type: "literal", value: "while", description: "\"while\"" },
        peg$c208 = "if",
        peg$c209 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c210 = "else",
        peg$c211 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c212 = "in",
        peg$c213 = { type: "literal", value: "in", description: "\"in\"" },
        peg$c214 = "out",
        peg$c215 = { type: "literal", value: "out", description: "\"out\"" },
        peg$c216 = "inout",
        peg$c217 = { type: "literal", value: "inout", description: "\"inout\"" },
        peg$c218 = "float",
        peg$c219 = { type: "literal", value: "float", description: "\"float\"" },
        peg$c220 = "int",
        peg$c221 = { type: "literal", value: "int", description: "\"int\"" },
        peg$c222 = "void",
        peg$c223 = { type: "literal", value: "void", description: "\"void\"" },
        peg$c224 = "bool",
        peg$c225 = { type: "literal", value: "bool", description: "\"bool\"" },
        peg$c226 = "lowp",
        peg$c227 = { type: "literal", value: "lowp", description: "\"lowp\"" },
        peg$c228 = "mediump",
        peg$c229 = { type: "literal", value: "mediump", description: "\"mediump\"" },
        peg$c230 = "highp",
        peg$c231 = { type: "literal", value: "highp", description: "\"highp\"" },
        peg$c232 = "precision",
        peg$c233 = { type: "literal", value: "precision", description: "\"precision\"" },
        peg$c234 = "invariant",
        peg$c235 = { type: "literal", value: "invariant", description: "\"invariant\"" },
        peg$c236 = "discard",
        peg$c237 = { type: "literal", value: "discard", description: "\"discard\"" },
        peg$c238 = "return",
        peg$c239 = { type: "literal", value: "return", description: "\"return\"" },
        peg$c240 = "mat2",
        peg$c241 = { type: "literal", value: "mat2", description: "\"mat2\"" },
        peg$c242 = "mat3",
        peg$c243 = { type: "literal", value: "mat3", description: "\"mat3\"" },
        peg$c244 = "mat4",
        peg$c245 = { type: "literal", value: "mat4", description: "\"mat4\"" },
        peg$c246 = "vec2",
        peg$c247 = { type: "literal", value: "vec2", description: "\"vec2\"" },
        peg$c248 = "vec3",
        peg$c249 = { type: "literal", value: "vec3", description: "\"vec3\"" },
        peg$c250 = "vec4",
        peg$c251 = { type: "literal", value: "vec4", description: "\"vec4\"" },
        peg$c252 = "ivec2",
        peg$c253 = { type: "literal", value: "ivec2", description: "\"ivec2\"" },
        peg$c254 = "ivec3",
        peg$c255 = { type: "literal", value: "ivec3", description: "\"ivec3\"" },
        peg$c256 = "ivec4",
        peg$c257 = { type: "literal", value: "ivec4", description: "\"ivec4\"" },
        peg$c258 = "bvec2",
        peg$c259 = { type: "literal", value: "bvec2", description: "\"bvec2\"" },
        peg$c260 = "bvec3",
        peg$c261 = { type: "literal", value: "bvec3", description: "\"bvec3\"" },
        peg$c262 = "bvec4",
        peg$c263 = { type: "literal", value: "bvec4", description: "\"bvec4\"" },
        peg$c264 = "sampler2D",
        peg$c265 = { type: "literal", value: "sampler2D", description: "\"sampler2D\"" },
        peg$c266 = "samplerCube",
        peg$c267 = { type: "literal", value: "samplerCube", description: "\"samplerCube\"" },
        peg$c268 = "struct",
        peg$c269 = { type: "literal", value: "struct", description: "\"struct\"" },
        peg$c270 = "GLSL_IN",
        peg$c271 = { type: "literal", value: "GLSL_IN", description: "\"GLSL_IN\"" },
        peg$c272 = "GLSL_OUT",
        peg$c273 = { type: "literal", value: "GLSL_OUT", description: "\"GLSL_OUT\"" },
        peg$c274 = "(",
        peg$c275 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c276 = function(data) { return punctuation_node("left_paren", data) },
        peg$c277 = ")",
        peg$c278 = { type: "literal", value: ")", description: "\")\"" },
        peg$c279 = function(data) { return punctuation_node("right_paren", data) },
        peg$c280 = "[",
        peg$c281 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c282 = function(data) { return punctuation_node("left_bracket", data) },
        peg$c283 = "]",
        peg$c284 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c285 = function(data) { return punctuation_node("right_bracket", data) },
        peg$c286 = "{",
        peg$c287 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c288 = function(data) { return punctuation_node("left_brace", data) },
        peg$c289 = "}",
        peg$c290 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c291 = function(data) { return punctuation_node("right_brace", data) },
        peg$c292 = ".",
        peg$c293 = { type: "literal", value: ".", description: "\".\"" },
        peg$c294 = function(data) { return punctuation_node("dot", data) },
        peg$c295 = ",",
        peg$c296 = { type: "literal", value: ",", description: "\",\"" },
        peg$c297 = function(data) { return punctuation_node("comma", data) },
        peg$c298 = ":",
        peg$c299 = { type: "literal", value: ":", description: "\":\"" },
        peg$c300 = function(data) { return punctuation_node("colon", data) },
        peg$c301 = ";",
        peg$c302 = { type: "literal", value: ";", description: "\";\"" },
        peg$c303 = function(data) { return punctuation_node("semicolon", data) },
        peg$c304 = "?",
        peg$c305 = { type: "literal", value: "?", description: "\"?\"" },
        peg$c306 = function(data) { return punctuation_node("question", data) },
        peg$c307 = /^[a-zA-Z_]/,
        peg$c308 = { type: "class", value: "[a-zA-Z_]", description: "[a-zA-Z_]" },
        peg$c309 = /^[0-9]/,
        peg$c310 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c311 = /^[0-7]/,
        peg$c312 = { type: "class", value: "[0-7]", description: "[0-7]" },
        peg$c313 = /^[0-9a-fA-F]/,
        peg$c314 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c315 = function(token) { return token.join("") },
        peg$c316 = /^[1-9]/,
        peg$c317 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c318 = function(dec) { return parseInt(dec); },
        peg$c319 = "0",
        peg$c320 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c321 = /^[xX]/,
        peg$c322 = { type: "class", value: "[xX]", description: "[xX]" },
        peg$c323 = function(token) { 
            var hex = token.join("");
            return parseInt(hex, 16);
          },
        peg$c324 = function(token) { 
            var oct = token.join("");
            return parseInt(oct, 8);
          },
        peg$c325 = /^[0]/,
        peg$c326 = { type: "class", value: "[0]", description: "[0]" },
        peg$c327 = /^[Ee]/,
        peg$c328 = { type: "class", value: "[Ee]", description: "[Ee]" },
        peg$c329 = /^[+\-]/,
        peg$c330 = { type: "class", value: "[+-]", description: "[+-]" },
        peg$c331 = "//",
        peg$c332 = { type: "literal", value: "//", description: "\"//\"" },
        peg$c333 = { type: "any", description: "any character" },
        peg$c334 = "/*",
        peg$c335 = { type: "literal", value: "/*", description: "\"/*\"" },
        peg$c336 = "*/",
        peg$c337 = { type: "literal", value: "*/", description: "\"*/\"" },
        peg$c338 = function(symbols) { check_directive_comment(symbols); },
        peg$c339 = /^[\t\f ]/,
        peg$c340 = { type: "class", value: "[\\t\\f ]", description: "[\\t\\f ]" },
        peg$c341 = "\x0B",
        peg$c342 = { type: "literal", value: "\x0B", description: "\"\\x0B\"" },
        peg$c343 = /^[\n\r]/,
        peg$c344 = { type: "class", value: "[\\n\\r]", description: "[\\n\\r]" },
        peg$c345 = "\r\n",
        peg$c346 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
        peg$c347 = "\n\r",
        peg$c348 = { type: "literal", value: "\n\r", description: "\"\\n\\r\"" },
        peg$c349 = "\n",
        peg$c350 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c351 = "\r",
        peg$c352 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c353 = "\\",
        peg$c354 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c355 = function(first, second) { 
            var res_str = "";
            for (var i = 0; i < first.length; i++)
              res_str += first[i];
            res_str += second;
            return res_str;
          },
        peg$c356 = function(line) { return line },
        peg$c357 = function(str) { 
            var res_str = "";
            for (var i = 0; i < str.length; i++)
              res_str += str[i][1];
            return res_str;
          },
        peg$c358 = function(units) {
            return {
              units: units,
              text: build_listing(vardef_replace(units))
            }
          },
        peg$c359 = "#",
        peg$c360 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c361 = function(tokens) {
            var result = [];
            for (var i = 0; i < tokens.length; i++) {
              if (tokens[i][1].name)
                result.push(tokens[i][1].name);
              else
                result.push(tokens[i][1]);
            }
            return common_node({
              node: "text",
              type: "textline",
              result: result
            });
          },
        peg$c362 = "var",
        peg$c363 = { type: "literal", value: "var", description: "\"var\"" },
        peg$c364 = "define",
        peg$c365 = { type: "literal", value: "define", description: "\"define\"" },
        peg$c366 = function(dir_string) { 
            var source_str = "#" + dir_string[2] + " ";
            source_str += dir_string[4].name + dir_string[5];
            source_str = source_str.trim();

            var result = {
              node: "directive",
              type: dir_string[2],
              source_str: source_str,
              repl: {
                from: dir_string[4].name,
                to: dir_string[5].trim()
              }
            }
            return common_node(result);
          },
        peg$c367 = "undef",
        peg$c368 = { type: "literal", value: "undef", description: "\"undef\"" },
        peg$c369 = function(dir_string) {
            return common_node({
              node: "directive",
              type: "undef",
              source_str: "#undef" + " " + dir_string[4].name,
              identifier: dir_string[4].name
            });
          },
        peg$c370 = "extension",
        peg$c371 = { type: "literal", value: "extension", description: "\"extension\"" },
        peg$c372 = "require",
        peg$c373 = { type: "literal", value: "require", description: "\"require\"" },
        peg$c374 = "enable",
        peg$c375 = { type: "literal", value: "enable", description: "\"enable\"" },
        peg$c376 = "warn",
        peg$c377 = { type: "literal", value: "warn", description: "\"warn\"" },
        peg$c378 = "disable",
        peg$c379 = { type: "literal", value: "disable", description: "\"disable\"" },
        peg$c380 = function(ext, behavior) {
            return common_node({
              node: "directive",
              type: "extension",
              source_str: "#extension " + ext.name + ":" + behavior,
              extension: ext.name,
              behavior: behavior
            });
          },
        peg$c381 = "ifdef",
        peg$c382 = { type: "literal", value: "ifdef", description: "\"ifdef\"" },
        peg$c383 = "ifndef",
        peg$c384 = { type: "literal", value: "ifndef", description: "\"ifndef\"" },
        peg$c385 = "elif",
        peg$c386 = { type: "literal", value: "elif", description: "\"elif\"" },
        peg$c387 = "endif",
        peg$c388 = { type: "literal", value: "endif", description: "\"endif\"" },
        peg$c389 = "error",
        peg$c390 = { type: "literal", value: "error", description: "\"error\"" },
        peg$c391 = "line",
        peg$c392 = { type: "literal", value: "line", description: "\"line\"" },
        peg$c393 = "pragma",
        peg$c394 = { type: "literal", value: "pragma", description: "\"pragma\"" },
        peg$c395 = "warning",
        peg$c396 = { type: "literal", value: "warning", description: "\"warning\"" },
        peg$c397 = "version",
        peg$c398 = { type: "literal", value: "version", description: "\"version\"" },
        peg$c399 = function() { return "" },
        peg$c400 = function(str) { return " " + str },
        peg$c401 = function(dir) { 
            var source_str = "#" + dir[2] + " " + dir[3];
            return common_node({
              node: "directive",
              type: dir[2],
              contents: dir[3],
              source_str: source_str
            });
          },
        peg$c402 = "node_ifdef",
        peg$c403 = { type: "literal", value: "node_ifdef", description: "\"node_ifdef\"" },
        peg$c404 = "node_ifndef",
        peg$c405 = { type: "literal", value: "node_ifndef", description: "\"node_ifndef\"" },
        peg$c406 = "node_if",
        peg$c407 = { type: "literal", value: "node_if", description: "\"node_if\"" },
        peg$c408 = "node_elif",
        peg$c409 = { type: "literal", value: "node_elif", description: "\"node_elif\"" },
        peg$c410 = "node_else",
        peg$c411 = { type: "literal", value: "node_else", description: "\"node_else\"" },
        peg$c412 = "node_endif",
        peg$c413 = { type: "literal", value: "node_endif", description: "\"node_endif\"" },
        peg$c414 = function(dir) { 
            var source_str = "#" + dir[2] + " " + dir[3];
            return common_node({
              node: "node_directive",
              type: "node_condition",
              subtype: dir[2],
              contents: dir[3],
              source_str: source_str
            });
          },
        peg$c415 = "nodes_global",
        peg$c416 = { type: "literal", value: "nodes_global", description: "\"nodes_global\"" },
        peg$c417 = "nodes_main",
        peg$c418 = { type: "literal", value: "nodes_main", description: "\"nodes_main\"" },
        peg$c419 = function(type) {
            return common_node({
              node: "node_directive",
              type: type
            });
          },
        peg$c420 = "node",
        peg$c421 = { type: "literal", value: "node", description: "\"node\"" },
        peg$c422 = function(id) {
            return common_node({
              node: "node_directive",
              type: "node",
              name: id.name
            });
          },
        peg$c423 = "endnode",
        peg$c424 = { type: "literal", value: "endnode", description: "\"endnode\"" },
        peg$c425 = function() {
            return common_node({
              node: "node_directive",
              type: "endnode",
            });
          },
        peg$c426 = "node_in",
        peg$c427 = { type: "literal", value: "node_in", description: "\"node_in\"" },
        peg$c428 = "node_out",
        peg$c429 = { type: "literal", value: "node_out", description: "\"node_out\"" },
        peg$c430 = "node_param",
        peg$c431 = { type: "literal", value: "node_param", description: "\"node_param\"" },
        peg$c432 = "optional",
        peg$c433 = { type: "literal", value: "optional", description: "\"optional\"" },
        peg$c434 = function(type, opt, decl_type, id) {
            return common_node({
              node: "node_directive",
              type: type,
              decl_type: decl_type,
              identifier: id,
              is_optional: Boolean(opt)
            });
          },
        peg$c435 = "node_var",
        peg$c436 = { type: "literal", value: "node_var", description: "\"node_var\"" },
        peg$c437 = function(dir_string) { 
            var source_str = "#node_var ";
            source_str += dir_string[4].name + dir_string[5];
            source_str = source_str.trim();

            var result = {
              node: "node_directive",
              type: "node_var",
              source_str: source_str,
              repl: {
                from: dir_string[4].name,
                to: dir_string[5].trim()
              }
            }
            return common_node(result);
          },
        peg$c438 = "include_end",
        peg$c439 = { type: "literal", value: "include_end", description: "\"include_end\"" },
        peg$c440 = "include",
        peg$c441 = { type: "literal", value: "include", description: "\"include\"" },
        peg$c442 = function(type, name_symbols) {
            var name = name_symbols.map(function(el) { return el[1] }).join("");
            return common_node({
              node: "include",
              type: type,
              name: name
            });
          },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsetranslation_unit();
      if (s1 === peg$FAILED) {
        s1 = peg$parseEOF();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetranslation_unit() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexternal_declaration();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsetranslation_unit();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsetranslation_unit();
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c1(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$currPos;
        s3 = peg$parsecomment();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseline_terminator_sequence();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$currPos;
            s3 = peg$parsecomment();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseline_terminator_sequence();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c2();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseexternal_declaration() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsefunction_definition();
      if (s1 === peg$FAILED) {
        s1 = peg$parsedeclaration();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c3(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedeclaration() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsefunction_declarator();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSEMICOLON();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c4(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseinit_declarator_list();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseSEMICOLON();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c5(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsePRECISION();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseMMS();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseprecision_qualifier();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseMMS();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsetype_specifier_no_prec();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseSEMICOLON();
                      if (s7 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c6(s1, s3, s5, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parseinit_declarator_list() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      s0 = peg$currPos;
      s1 = peg$parsesingle_declaration();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseIDENTIFIER();
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseLEFT_BRACKET();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parse__();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parseconditional_expression();
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parse__();
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parseRIGHT_BRACKET();
                          if (s14 !== peg$FAILED) {
                            peg$reportedPos = s8;
                            s9 = peg$c7(s10, s12, s14);
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 === peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseEQUAL();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse__();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parseassignment_expression();
                        if (s12 !== peg$FAILED) {
                          peg$reportedPos = s8;
                          s9 = peg$c8(s10, s12);
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                }
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                if (s8 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7, s8];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseIDENTIFIER();
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseLEFT_BRACKET();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse__();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parseconditional_expression();
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parse__();
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parseRIGHT_BRACKET();
                            if (s14 !== peg$FAILED) {
                              peg$reportedPos = s8;
                              s9 = peg$c7(s10, s12, s14);
                              s8 = s9;
                            } else {
                              peg$currPos = s8;
                              s8 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = peg$currPos;
                    s9 = peg$parse__();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseEQUAL();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parse__();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parseassignment_expression();
                          if (s12 !== peg$FAILED) {
                            peg$reportedPos = s8;
                            s9 = peg$c8(s10, s12);
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  }
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7, s8];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c9(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesingle_declaration() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseINVARIANT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMMS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIDENTIFIER();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c10(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsefully_specified_type();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseMMS();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIDENTIFIER();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseLEFT_BRACKET();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse__();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseconditional_expression();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse__();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseRIGHT_BRACKET();
                        if (s11 !== peg$FAILED) {
                          peg$reportedPos = s5;
                          s6 = peg$c7(s7, s9, s11);
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseEQUAL();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse__();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseassignment_expression();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s5;
                        s6 = peg$c8(s7, s9);
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c11(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsefunction_definition() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsefunction_head();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefunction_scope();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c12(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunction_head() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsefully_specified_type();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMMS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIDENTIFIER();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c13(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunction_scope() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsefunction_parameters();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecompound_statement_no_new_scope();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c14(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunction_parameters() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseLEFT_PAREN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseVOID();
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseparameter_declaration();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseCOMMA();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseparameter_declaration();
                    if (s10 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseCOMMA();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse__();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseparameter_declaration();
                      if (s10 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c15(s4, s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$c16;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRIGHT_PAREN();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c17(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunction_declarator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsefunction_head();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefunction_parameters();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c18(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseparameter_declaration() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsetype_qualifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseMMS();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseparameter_qualifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseMMS();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseparameter_declarator();
          if (s3 === peg$FAILED) {
            s3 = peg$parseparameter_type_specifier();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c19(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseparameter_declarator() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsetype_specifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMMS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIDENTIFIER();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseLEFT_BRACKET();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseconditional_expression();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse__();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseRIGHT_BRACKET();
                      if (s10 !== peg$FAILED) {
                        s5 = [s5, s6, s7, s8, s9, s10];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c20(s1, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunction_call() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsefunction_call_header_no_parameters();
      if (s1 === peg$FAILED) {
        s1 = peg$parsefunction_call_header_with_parameters();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c21(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefunction_call_header_no_parameters() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsefunction_call_header();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseVOID();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRIGHT_PAREN();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c22(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunction_call_header_with_parameters() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsefunction_call_header();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseassignment_expression();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parse__();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseCOMMA();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseassignment_expression();
                  if (s10 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseCOMMA();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseassignment_expression();
                    if (s10 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRIGHT_PAREN();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c23(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunction_call_header() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsefunction_identifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLEFT_PAREN();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c24(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunction_identifier() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseconstructor_identifier();
      if (s1 === peg$FAILED) {
        s1 = peg$parseIDENTIFIER();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c25(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestruct_specifier() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseSTRUCT();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseMMS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseTYPE_NAME();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLEFT_BRACE();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse__();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsestruct_declaration_list();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse__();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseRIGHT_BRACE();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c26(s1, s2, s4, s6, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestruct_declaration_list() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsestruct_declaration();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c27(s3);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$parsestruct_declaration();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s2;
              s3 = peg$c27(s3);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c28(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestruct_declaration() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsetype_specifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMMS();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestruct_declarator_list();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSEMICOLON();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c29(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestruct_declarator_list() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsestruct_declarator();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsestruct_declarator();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsestruct_declarator();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c30(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestruct_declarator() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseIDENTIFIER();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseLEFT_BRACKET();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseconditional_expression();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseRIGHT_BRACKET();
                  if (s8 !== peg$FAILED) {
                    s3 = [s3, s4, s5, s6, s7, s8];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c31(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseexpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseassignment_expression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseCOMMA();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseassignment_expression();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c32(s5, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCOMMA();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseassignment_expression();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c32(s5, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c33(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseassignment_expression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseunary_expression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseassignment_operator();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseassignment_expression();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c34(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseconditional_expression();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c35(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseconditional_expression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parselogical_or_expression();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseQUESTION();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseexpression();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseCOLON();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse__();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseassignment_expression();
                      if (s10 !== peg$FAILED) {
                        s3 = [s3, s4, s5, s6, s7, s8, s9, s10];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c36(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselogical_or_expression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parselogical_xor_expression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseOR_OP();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parselogical_xor_expression();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c37(s5, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseOR_OP();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parselogical_xor_expression();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c37(s5, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c38(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselogical_xor_expression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parselogical_and_expression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseXOR_OP();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parselogical_and_expression();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c37(s5, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseXOR_OP();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parselogical_and_expression();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c37(s5, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c39(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselogical_and_expression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseequality_expression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseAND_OP();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseequality_expression();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c37(s5, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAND_OP();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseequality_expression();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c37(s5, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c40(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseequality_expression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parserelational_expression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseEQ_OP();
          if (s5 === peg$FAILED) {
            s5 = peg$parseNE_OP();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parserelational_expression();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c37(s5, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseEQ_OP();
            if (s5 === peg$FAILED) {
              s5 = peg$parseNE_OP();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parserelational_expression();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c37(s5, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c41(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserelational_expression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseadditive_expression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseLE_OP();
          if (s5 === peg$FAILED) {
            s5 = peg$parseGE_OP();
            if (s5 === peg$FAILED) {
              s5 = peg$parseLEFT_ANGLE();
              if (s5 === peg$FAILED) {
                s5 = peg$parseRIGHT_ANGLE();
              }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseadditive_expression();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c37(s5, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLE_OP();
            if (s5 === peg$FAILED) {
              s5 = peg$parseGE_OP();
              if (s5 === peg$FAILED) {
                s5 = peg$parseLEFT_ANGLE();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseRIGHT_ANGLE();
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseadditive_expression();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c37(s5, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseadditive_expression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsemultiplicative_expression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsePLUS();
          if (s5 === peg$FAILED) {
            s5 = peg$parseDASH();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsemultiplicative_expression();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c37(s5, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsePLUS();
            if (s5 === peg$FAILED) {
              s5 = peg$parseDASH();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsemultiplicative_expression();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c37(s5, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c43(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemultiplicative_expression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseunary_expression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSTAR();
          if (s5 === peg$FAILED) {
            s5 = peg$parseSLASH();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseunary_expression();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c37(s5, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSTAR();
            if (s5 === peg$FAILED) {
              s5 = peg$parseSLASH();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseunary_expression();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c37(s5, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c44(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseunary_expression() {
      var s0, s1, s2, s3;

      s0 = peg$parsepostfix_expression();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseINC_OP();
        if (s1 === peg$FAILED) {
          s1 = peg$parseDEC_OP();
          if (s1 === peg$FAILED) {
            s1 = peg$parseunary_operator();
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseunary_expression();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c45(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsepostfix_expression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsefunction_call();
      if (s1 === peg$FAILED) {
        s1 = peg$parseprimary_expression();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = peg$parseLEFT_BRACKET();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseexpression();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse__();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseRIGHT_BRACKET();
                  if (s10 !== peg$FAILED) {
                    peg$reportedPos = s5;
                    s6 = peg$c46(s6, s8, s10);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = peg$parseFIELD_SELECTION();
            if (s5 === peg$FAILED) {
              s5 = peg$parseINC_OP();
              if (s5 === peg$FAILED) {
                s5 = peg$parseDEC_OP();
              }
            }
          }
          if (s5 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c47(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseLEFT_BRACKET();
            if (s6 !== peg$FAILED) {
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseexpression();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseRIGHT_BRACKET();
                    if (s10 !== peg$FAILED) {
                      peg$reportedPos = s5;
                      s6 = peg$c46(s6, s8, s10);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$parseFIELD_SELECTION();
              if (s5 === peg$FAILED) {
                s5 = peg$parseINC_OP();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseDEC_OP();
                }
              }
            }
            if (s5 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c47(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c48(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseprimary_expression() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseFLOATCONSTANT();
      if (s1 === peg$FAILED) {
        s1 = peg$parseINTCONSTANT();
        if (s1 === peg$FAILED) {
          s1 = peg$parseBOOLCONSTANT();
          if (s1 === peg$FAILED) {
            s1 = peg$parseIDENTIFIER();
            if (s1 === peg$FAILED) {
              s1 = peg$parseparen_expression();
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c49(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseparen_expression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseLEFT_PAREN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRIGHT_PAREN();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c50(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecompound_statement_no_new_scope() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseLEFT_BRACE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestatement_list();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRIGHT_BRACE();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c51(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestatement_list() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsestatement_no_new_scope();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c52(s3);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsestatement_no_new_scope();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c52(s3);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c53(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestatement_no_new_scope() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsecompound_statement_with_scope();
      if (s1 === peg$FAILED) {
        s1 = peg$parsesimple_statement();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c54(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecompound_statement_with_scope() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseLEFT_BRACE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestatement_list();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseRIGHT_BRACE();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c55(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesimple_statement() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseexpression_statement();
      if (s1 === peg$FAILED) {
        s1 = peg$parsedeclaration_statement();
        if (s1 === peg$FAILED) {
          s1 = peg$parseselection_statement();
          if (s1 === peg$FAILED) {
            s1 = peg$parseiteration_statement();
            if (s1 === peg$FAILED) {
              s1 = peg$parsejump_statement();
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c56(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedeclaration_statement() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsedeclaration();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c57(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseexpression_statement() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseexpression();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSEMICOLON();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c58(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseselection_statement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseIF();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLEFT_PAREN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpression();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseRIGHT_PAREN();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse__();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseselection_rest_statement();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c59(s1, s3, s5, s7, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseselection_rest_statement() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsestatement_with_scope();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseELSE();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsestatement_with_scope();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c60(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestatement_with_scope() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsecompound_statement_no_new_scope();
      if (s1 === peg$FAILED) {
        s1 = peg$parsesimple_statement();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c61(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseiteration_statement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      s1 = peg$parseWHILE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLEFT_PAREN();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecondition();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseRIGHT_PAREN();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse__();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsecompound_statement_no_new_scope();
                      if (s9 === peg$FAILED) {
                        s9 = peg$parsesimple_statement();
                      }
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c62(s1, s3, s5, s7, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDO();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecompound_statement_no_new_scope();
            if (s3 === peg$FAILED) {
              s3 = peg$parsesimple_statement();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseWHILE();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse__();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseLEFT_PAREN();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse__();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseexpression();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parse__();
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parseRIGHT_PAREN();
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parse__();
                              if (s12 !== peg$FAILED) {
                                s13 = peg$parseSEMICOLON();
                                if (s13 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c63(s1, s3, s5, s7, s9, s11, s13);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseFOR();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseLEFT_PAREN();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsefor_init_statement();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsefor_rest_statement();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse__();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parseRIGHT_PAREN();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parse__();
                            if (s10 !== peg$FAILED) {
                              s11 = peg$parsecompound_statement_no_new_scope();
                              if (s11 === peg$FAILED) {
                                s11 = peg$parsesimple_statement();
                              }
                              if (s11 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c64(s1, s3, s5, s7, s9, s11);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parsecondition() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsefully_specified_type();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseMMS();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseIDENTIFIER();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseEQUAL();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseassignment_expression();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s1;
                    s2 = peg$c65(s2, s4, s6, s8);
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$parseexpression();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c66(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefor_init_statement() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseexpression_statement();
      if (s1 === peg$FAILED) {
        s1 = peg$parsedeclaration_statement();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c67(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefor_rest_statement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsecondition();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSEMICOLON();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpression();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c68(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsejump_statement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseCONTINUE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseBREAK();
        if (s1 === peg$FAILED) {
          s1 = peg$parseRETURN();
          if (s1 === peg$FAILED) {
            s1 = peg$parseDISCARD();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSEMICOLON();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c69(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseRETURN();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexpression();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseSEMICOLON();
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c70(s1, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsetype_specifier() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseprecision_qualifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseMMS();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetype_specifier_no_prec();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c71(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseparameter_type_specifier() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsetype_specifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseLEFT_BRACKET();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseconditional_expression();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseRIGHT_BRACKET();
                  if (s8 !== peg$FAILED) {
                    s3 = [s3, s4, s5, s6, s7, s8];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c72(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefully_specified_type() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsetype_qualifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseMMS();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetype_specifier();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c73(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetype_qualifier() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseCONST();
      if (s1 === peg$FAILED) {
        s1 = peg$parseGLSL_IN();
        if (s1 === peg$FAILED) {
          s1 = peg$parseGLSL_OUT();
          if (s1 === peg$FAILED) {
            s1 = peg$parseUNIFORM();
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              s2 = peg$currPos;
              s3 = peg$parseINVARIANT();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseMMS();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseGLSL_OUT();
                  if (s5 !== peg$FAILED) {
                    s3 = [s3, s4, s5];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s1;
                s2 = peg$c74(s2);
              }
              s1 = s2;
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c75(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseparameter_qualifier() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseINOUT();
      if (s1 === peg$FAILED) {
        s1 = peg$parseIN();
        if (s1 === peg$FAILED) {
          s1 = peg$parseOUT();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c76(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseprecision_qualifier() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseLOW_PRECISION();
      if (s1 === peg$FAILED) {
        s1 = peg$parseMEDIUM_PRECISION();
        if (s1 === peg$FAILED) {
          s1 = peg$parseHIGH_PRECISION();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c77(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseassignment_operator() {
      var s0;

      s0 = peg$parseEQUAL();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMUL_ASSIGN();
        if (s0 === peg$FAILED) {
          s0 = peg$parseDIV_ASSIGN();
          if (s0 === peg$FAILED) {
            s0 = peg$parseADD_ASSIGN();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSUB_ASSIGN();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseunary_operator() {
      var s0;

      s0 = peg$parsePLUS();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDASH();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBANG();
        }
      }

      return s0;
    }

    function peg$parsetype_specifier_no_prec() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseVOID();
      if (s1 === peg$FAILED) {
        s1 = peg$parseFLOAT();
        if (s1 === peg$FAILED) {
          s1 = peg$parseINT();
          if (s1 === peg$FAILED) {
            s1 = peg$parseBOOL();
            if (s1 === peg$FAILED) {
              s1 = peg$parseVEC2();
              if (s1 === peg$FAILED) {
                s1 = peg$parseVEC3();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseVEC4();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseBVEC2();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseBVEC3();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseBVEC4();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseIVEC2();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parseIVEC3();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parseIVEC4();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parseMAT2();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parseMAT3();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parseMAT4();
                                    if (s1 === peg$FAILED) {
                                      s1 = peg$parseSAMPLER2D();
                                      if (s1 === peg$FAILED) {
                                        s1 = peg$parseSAMPLERCUBE();
                                        if (s1 === peg$FAILED) {
                                          s1 = peg$parsestruct_specifier();
                                          if (s1 === peg$FAILED) {
                                            s1 = peg$parseTYPE_NAME();
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c78(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseconstructor_identifier() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseFLOAT();
      if (s1 === peg$FAILED) {
        s1 = peg$parseINT();
        if (s1 === peg$FAILED) {
          s1 = peg$parseBOOL();
          if (s1 === peg$FAILED) {
            s1 = peg$parseVEC2();
            if (s1 === peg$FAILED) {
              s1 = peg$parseVEC3();
              if (s1 === peg$FAILED) {
                s1 = peg$parseVEC4();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseBVEC2();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseBVEC3();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseBVEC4();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseIVEC2();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseIVEC3();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parseIVEC4();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parseMAT2();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parseMAT3();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parseMAT4();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parseTYPE_NAME();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIDENTIFIER();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c79(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIDENTIFIER() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseRESERVED();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parsenondigit();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsenondigit();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsenondigit();
          if (s5 === peg$FAILED) {
            s5 = peg$parsedigit();
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsenondigit();
            if (s5 === peg$FAILED) {
              s5 = peg$parsedigit();
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c80(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTYPE_NAME() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseIDENTIFIER();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c81(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFLOATCONSTANT() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsefractional_float();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexponent_part();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parsedigit_sequence_nonzero_lead();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexponent_part();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c82(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseINTCONSTANT() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsedecimal_int();
      if (s1 === peg$FAILED) {
        s1 = peg$parsehexadecimal_int();
        if (s1 === peg$FAILED) {
          s1 = peg$parseoctal_int();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c83(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBOOLCONSTANT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c84) {
        s1 = peg$c84;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c85); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c86) {
          s1 = peg$c86;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c87); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c88(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFIELD_SELECTION() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDOT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIDENTIFIER();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c89(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseRESERVED() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parsenondigit();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsenondigit();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsenondigit();
        if (s4 === peg$FAILED) {
          s4 = peg$parsedigit();
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsenondigit();
          if (s4 === peg$FAILED) {
            s4 = peg$parsedigit();
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c90(s1);
        if (s2) {
          s2 = void 0;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c91(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePLUS() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c92;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c94(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDASH() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c95;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c96); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c97(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSTAR() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 42) {
        s1 = peg$c98;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c99); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c100(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSLASH() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s1 = peg$c101;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c103(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseINC_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c104) {
        s1 = peg$c104;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c106(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDEC_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c107) {
        s1 = peg$c107;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c108); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c109(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseEQUAL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 61) {
        s1 = peg$c110;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c112(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMUL_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c113) {
        s1 = peg$c113;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c115(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDIV_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c116) {
        s1 = peg$c116;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c117); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c118(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseADD_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c119) {
        s1 = peg$c119;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c120); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c121(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSUB_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c122) {
        s1 = peg$c122;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c124(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLEFT_ANGLE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c125;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c126); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c127(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseRIGHT_ANGLE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 62) {
        s1 = peg$c128;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c129); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c130(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseEQ_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c131) {
        s1 = peg$c131;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c132); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c112(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLE_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c133) {
        s1 = peg$c133;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c134); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c135(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseGE_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c136) {
        s1 = peg$c136;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c137); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c138(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBANG() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 33) {
        s1 = peg$c139;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c140); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c141(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseNE_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c142) {
        s1 = peg$c142;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c143); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c144(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAND_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c145) {
        s1 = peg$c145;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c146); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c147(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOR_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c148) {
        s1 = peg$c148;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c149); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c150(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseXOR_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c151) {
        s1 = peg$c151;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c152); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c153(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTILDE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 126) {
        s1 = peg$c154;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c155); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c156(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsePERCENT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 37) {
        s1 = peg$c157;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c158); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c159(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLEFT_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c160) {
        s1 = peg$c160;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c161); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c162(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseRIGHT_OP() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c163) {
        s1 = peg$c163;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c164); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c165(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAMPERSAND() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 38) {
        s1 = peg$c166;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c167); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c168(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCARET() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 94) {
        s1 = peg$c169;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c170); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c171(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseVERTICAL_BAR() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 124) {
        s1 = peg$c172;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c173); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c174(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMOD_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c175) {
        s1 = peg$c175;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c176); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c177(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLEFT_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c178) {
        s1 = peg$c178;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c179); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c180(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseRIGHT_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c181) {
        s1 = peg$c181;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c182); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c183(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAND_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c184) {
        s1 = peg$c184;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c185); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c186(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseXOR_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c187) {
        s1 = peg$c187;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c188); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c189(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOR_ASSIGN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c190) {
        s1 = peg$c190;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c191); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c192(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCONST() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c193) {
        s1 = peg$c193;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c194); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseUNIFORM() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c196) {
        s1 = peg$c196;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c197); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBREAK() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c198) {
        s1 = peg$c198;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c199); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCONTINUE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c200) {
        s1 = peg$c200;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c201); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDO() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c202) {
        s1 = peg$c202;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c203); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFOR() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c204) {
        s1 = peg$c204;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c205); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseWHILE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c206) {
        s1 = peg$c206;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c207); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIF() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c208) {
        s1 = peg$c208;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c209); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseELSE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c210) {
        s1 = peg$c210;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c211); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c212) {
        s1 = peg$c212;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c213); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOUT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c214) {
        s1 = peg$c214;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c215); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseINOUT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c216) {
        s1 = peg$c216;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c217); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFLOAT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c218) {
        s1 = peg$c218;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c219); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseINT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c220) {
        s1 = peg$c220;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c221); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseVOID() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c222) {
        s1 = peg$c222;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c223); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBOOL() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c224) {
        s1 = peg$c224;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c225); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLOW_PRECISION() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c226) {
        s1 = peg$c226;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c227); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMEDIUM_PRECISION() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c228) {
        s1 = peg$c228;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c229); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseHIGH_PRECISION() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c230) {
        s1 = peg$c230;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c231); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsePRECISION() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c232) {
        s1 = peg$c232;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c233); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseINVARIANT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c234) {
        s1 = peg$c234;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c235); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDISCARD() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c236) {
        s1 = peg$c236;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c237); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseRETURN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c238) {
        s1 = peg$c238;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c239); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMAT2() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c240) {
        s1 = peg$c240;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c241); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMAT3() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c242) {
        s1 = peg$c242;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c243); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseMAT4() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c244) {
        s1 = peg$c244;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c245); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseVEC2() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c246) {
        s1 = peg$c246;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseVEC3() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c248) {
        s1 = peg$c248;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c249); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseVEC4() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c250) {
        s1 = peg$c250;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c251); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIVEC2() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c252) {
        s1 = peg$c252;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c253); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIVEC3() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c254) {
        s1 = peg$c254;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c255); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIVEC4() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c256) {
        s1 = peg$c256;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c257); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBVEC2() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c258) {
        s1 = peg$c258;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c259); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBVEC3() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c260) {
        s1 = peg$c260;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c261); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBVEC4() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c262) {
        s1 = peg$c262;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c263); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSAMPLER2D() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c264) {
        s1 = peg$c264;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c265); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSAMPLERCUBE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c266) {
        s1 = peg$c266;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c267); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSTRUCT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c268) {
        s1 = peg$c268;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c269); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseGLSL_IN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c270) {
        s1 = peg$c270;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c271); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseGLSL_OUT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c272) {
        s1 = peg$c272;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c273); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c195(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLEFT_PAREN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c274;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c275); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c276(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseRIGHT_PAREN() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 41) {
        s1 = peg$c277;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c278); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c279(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLEFT_BRACKET() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c280;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c281); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c282(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseRIGHT_BRACKET() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 93) {
        s1 = peg$c283;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c284); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c285(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLEFT_BRACE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c286;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c287); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c288(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseRIGHT_BRACE() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 125) {
        s1 = peg$c289;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c290); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c291(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseDOT() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c292;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c293); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c294(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCOMMA() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c295;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c296); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c297(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCOLON() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s1 = peg$c298;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c299); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c300(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSEMICOLON() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c301;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c302); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c303(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseQUESTION() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 63) {
        s1 = peg$c304;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c305); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c306(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenondigit() {
      var s0;

      if (peg$c307.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c308); }
      }

      return s0;
    }

    function peg$parsedigit() {
      var s0;

      if (peg$c309.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c310); }
      }

      return s0;
    }

    function peg$parseoct_digit() {
      var s0;

      if (peg$c311.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c312); }
      }

      return s0;
    }

    function peg$parsehex_digit() {
      var s0;

      if (peg$c313.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c314); }
      }

      return s0;
    }

    function peg$parsedigit_sequence() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsedigit();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsedigit();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c315(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedigit_sequence_nonzero_lead() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c316.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c317); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsedigit_sequence();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsedigit_sequence();
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c315(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseoct_digit_sequence() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseoct_digit();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseoct_digit();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c315(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsehex_digit_sequence() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsehex_digit();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsehex_digit();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c315(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedecimal_int() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsedigit_sequence_nonzero_lead();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c318(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsehexadecimal_int() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 48) {
        s2 = peg$c319;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c320); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c321.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c322); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsehex_digit_sequence();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c323(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseoctal_int() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 48) {
        s2 = peg$c319;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c320); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseoct_digit_sequence();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseoct_digit_sequence();
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c324(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsefractional_float() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c325.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c326); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$parsedigit_sequence_nonzero_lead();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c292;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c293); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsedigit_sequence();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c292;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c293); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedigit_sequence();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c315(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseexponent_part() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c327.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c328); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c329.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c330); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsedigit_sequence();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c315(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecomment() {
      var s0;

      s0 = peg$parsemultiline_comment();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesingleline_comment();
      }

      return s0;
    }

    function peg$parsesingleline_comment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c331) {
        s1 = peg$c331;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c332); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseline_terminator();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c333); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseline_terminator();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c333); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemultiline_comment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c334) {
        s1 = peg$c334;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c335); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c336) {
          s5 = peg$c336;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c337); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c333); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c336) {
            s5 = peg$c336;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c337); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c333); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c336) {
            s3 = peg$c336;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c337); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c338(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemultiline_comment_no_line_terminator() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c334) {
        s1 = peg$c334;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c335); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c336) {
          s5 = peg$c336;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c337); }
        }
        if (s5 === peg$FAILED) {
          s5 = peg$parseline_terminator();
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c333); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c336) {
            s5 = peg$c336;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c337); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$parseline_terminator();
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c333); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c336) {
            s3 = peg$c336;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c337); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c338(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsewhitespace() {
      var s0;

      if (peg$c339.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c340); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 11) {
          s0 = peg$c341;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c342); }
        }
      }

      return s0;
    }

    function peg$parseline_terminator() {
      var s0;

      if (peg$c343.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c344); }
      }

      return s0;
    }

    function peg$parseline_terminator_sequence() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c345) {
        s0 = peg$c345;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c346); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c347) {
          s0 = peg$c347;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c348); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 10) {
            s0 = peg$c349;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c350); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 13) {
              s0 = peg$c351;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c352); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseline_continuation() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c353;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c354); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseline_terminator_sequence();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parseline_terminator_sequence();
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c16;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseline_terminator_sequence();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsewhitespace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseline_continuation();
        if (s1 === peg$FAILED) {
          s1 = peg$parseline_terminator_sequence();
          if (s1 === peg$FAILED) {
            s1 = peg$parsecomment();
          }
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsewhitespace();
        if (s1 === peg$FAILED) {
          s1 = peg$parseline_continuation();
          if (s1 === peg$FAILED) {
            s1 = peg$parseline_terminator_sequence();
            if (s1 === peg$FAILED) {
              s1 = peg$parsecomment();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseMMS() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsewhitespace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseline_continuation();
        if (s1 === peg$FAILED) {
          s1 = peg$parseline_terminator_sequence();
          if (s1 === peg$FAILED) {
            s1 = peg$parsecomment();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsewhitespace();
          if (s1 === peg$FAILED) {
            s1 = peg$parseline_continuation();
            if (s1 === peg$FAILED) {
              s1 = peg$parseline_terminator_sequence();
              if (s1 === peg$FAILED) {
                s1 = peg$parsecomment();
              }
            }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsewhitespace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseline_continuation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsesingleline_comment();
          if (s1 === peg$FAILED) {
            s1 = peg$parsemultiline_comment_no_line_terminator();
          }
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsewhitespace();
        if (s1 === peg$FAILED) {
          s1 = peg$parseline_continuation();
          if (s1 === peg$FAILED) {
            s1 = peg$parsesingleline_comment();
            if (s1 === peg$FAILED) {
              s1 = peg$parsemultiline_comment_no_line_terminator();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseMSS() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsewhitespace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseline_continuation();
        if (s1 === peg$FAILED) {
          s1 = peg$parsesingleline_comment();
          if (s1 === peg$FAILED) {
            s1 = peg$parsemultiline_comment_no_line_terminator();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsewhitespace();
          if (s1 === peg$FAILED) {
            s1 = peg$parseline_continuation();
            if (s1 === peg$FAILED) {
              s1 = peg$parsesingleline_comment();
              if (s1 === peg$FAILED) {
                s1 = peg$parsemultiline_comment_no_line_terminator();
              }
            }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetill_string_end() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsecontinued_line();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsecontinued_line();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseline_no_term_count();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesingleline_comment();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseline_terminator_sequence();
            if (s4 === peg$FAILED) {
              s4 = peg$parseEOF();
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c355(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecontinued_line() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseline_no_term_count();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesingleline_comment();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseline_continuation();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c356(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseline_no_term_count() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parseline_terminator_sequence();
      if (s4 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s4 = peg$c353;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c354); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c331) {
            s4 = peg$c331;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c332); }
          }
        }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = void 0;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c333); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseline_terminator_sequence();
        if (s4 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 92) {
            s4 = peg$c353;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c354); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c331) {
              s4 = peg$c331;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c332); }
            }
          }
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c333); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c357(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseEOF() {
      var s0, s1;

      s0 = peg$currPos;
      peg$silentFails++;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c333); }
      }
      peg$silentFails--;
      if (s1 === peg$FAILED) {
        s0 = void 0;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepp_start() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsepp_unit();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsepp_unit();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c358(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepp_unit() {
      var s0, s1, s2, s3, s4;

      s0 = peg$parsepp_replace();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepp_undef();
        if (s0 === peg$FAILED) {
          s0 = peg$parsepp_extension();
          if (s0 === peg$FAILED) {
            s0 = peg$parsepp_directives();
            if (s0 === peg$FAILED) {
              s0 = peg$parsepp_node_dir();
              if (s0 === peg$FAILED) {
                s0 = peg$parseinclude_dir_comment();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = [];
                  s2 = peg$currPos;
                  s3 = peg$currPos;
                  peg$silentFails++;
                  if (input.charCodeAt(peg$currPos) === 35) {
                    s4 = peg$c359;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c360); }
                  }
                  if (s4 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c331) {
                      s4 = peg$c331;
                      peg$currPos += 2;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c332); }
                    }
                    if (s4 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c334) {
                        s4 = peg$c334;
                        peg$currPos += 2;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c335); }
                      }
                    }
                  }
                  peg$silentFails--;
                  if (s4 === peg$FAILED) {
                    s3 = void 0;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseIDENTIFIER();
                    if (s4 === peg$FAILED) {
                      s4 = peg$parseRESERVED();
                      if (s4 === peg$FAILED) {
                        if (input.length > peg$currPos) {
                          s4 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c333); }
                        }
                      }
                    }
                    if (s4 !== peg$FAILED) {
                      s3 = [s3, s4];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                  if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                      s1.push(s2);
                      s2 = peg$currPos;
                      s3 = peg$currPos;
                      peg$silentFails++;
                      if (input.charCodeAt(peg$currPos) === 35) {
                        s4 = peg$c359;
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c360); }
                      }
                      if (s4 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c331) {
                          s4 = peg$c331;
                          peg$currPos += 2;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c332); }
                        }
                        if (s4 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c334) {
                            s4 = peg$c334;
                            peg$currPos += 2;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c335); }
                          }
                        }
                      }
                      peg$silentFails--;
                      if (s4 === peg$FAILED) {
                        s3 = void 0;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseIDENTIFIER();
                        if (s4 === peg$FAILED) {
                          s4 = peg$parseRESERVED();
                          if (s4 === peg$FAILED) {
                            if (input.length > peg$currPos) {
                              s4 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c333); }
                            }
                          }
                        }
                        if (s4 !== peg$FAILED) {
                          s3 = [s3, s4];
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    }
                  } else {
                    s1 = peg$FAILED;
                  }
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c361(s1);
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsepp_replace() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s2 = peg$c359;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c360); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c362) {
            s4 = peg$c362;
            peg$currPos += 3;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c363); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c364) {
              s4 = peg$c364;
              peg$currPos += 6;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c365); }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseMSS();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseIDENTIFIER();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetill_string_end();
                if (s7 !== peg$FAILED) {
                  s2 = [s2, s3, s4, s5, s6, s7];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c366(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsepp_undef() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s2 = peg$c359;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c360); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c367) {
            s4 = peg$c367;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c368); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseMSS();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseIDENTIFIER();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetill_string_end();
                if (s7 !== peg$FAILED) {
                  s2 = [s2, s3, s4, s5, s6, s7];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c369(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsepp_extension() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c359;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c360); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c370) {
            s3 = peg$c370;
            peg$currPos += 9;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c371); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMSS();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseIDENTIFIER();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s7 = peg$c298;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c299); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 7) === peg$c372) {
                        s9 = peg$c372;
                        peg$currPos += 7;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c373); }
                      }
                      if (s9 === peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c374) {
                          s9 = peg$c374;
                          peg$currPos += 6;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c375); }
                        }
                        if (s9 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c376) {
                            s9 = peg$c376;
                            peg$currPos += 4;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c377); }
                          }
                          if (s9 === peg$FAILED) {
                            if (input.substr(peg$currPos, 7) === peg$c378) {
                              s9 = peg$c378;
                              peg$currPos += 7;
                            } else {
                              s9 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c379); }
                            }
                          }
                        }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsetill_string_end();
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c380(s5, s9);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepp_directives() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s2 = peg$c359;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c360); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c381) {
            s4 = peg$c381;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c382); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c383) {
              s4 = peg$c383;
              peg$currPos += 6;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c384); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c208) {
                s4 = peg$c208;
                peg$currPos += 2;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c209); }
              }
              if (s4 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c385) {
                  s4 = peg$c385;
                  peg$currPos += 4;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c386); }
                }
                if (s4 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c210) {
                    s4 = peg$c210;
                    peg$currPos += 4;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c211); }
                  }
                  if (s4 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c387) {
                      s4 = peg$c387;
                      peg$currPos += 5;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c388); }
                    }
                    if (s4 === peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c389) {
                        s4 = peg$c389;
                        peg$currPos += 5;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c390); }
                      }
                      if (s4 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c391) {
                          s4 = peg$c391;
                          peg$currPos += 4;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c392); }
                        }
                        if (s4 === peg$FAILED) {
                          if (input.substr(peg$currPos, 6) === peg$c393) {
                            s4 = peg$c393;
                            peg$currPos += 6;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c394); }
                          }
                          if (s4 === peg$FAILED) {
                            if (input.substr(peg$currPos, 7) === peg$c395) {
                              s4 = peg$c395;
                              peg$currPos += 7;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c396); }
                            }
                            if (s4 === peg$FAILED) {
                              if (input.substr(peg$currPos, 7) === peg$c397) {
                                s4 = peg$c397;
                                peg$currPos += 7;
                              } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c398); }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseline_terminator_sequence();
            if (s6 !== peg$FAILED) {
              peg$reportedPos = s5;
              s6 = peg$c399();
            }
            s5 = s6;
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseMSS();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetill_string_end();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s5;
                  s6 = peg$c400(s7);
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c401(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsepp_node_dir() {
      var s0;

      s0 = peg$parsenodes_insertion();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenodes_condition();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenodes_parameters();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenode();
            if (s0 === peg$FAILED) {
              s0 = peg$parseendnode();
              if (s0 === peg$FAILED) {
                s0 = peg$parsenode_var();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsenodes_condition() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s2 = peg$c359;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c360); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c402) {
            s4 = peg$c402;
            peg$currPos += 10;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c403); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 11) === peg$c404) {
              s4 = peg$c404;
              peg$currPos += 11;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c405); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c406) {
                s4 = peg$c406;
                peg$currPos += 7;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c407); }
              }
              if (s4 === peg$FAILED) {
                if (input.substr(peg$currPos, 9) === peg$c408) {
                  s4 = peg$c408;
                  peg$currPos += 9;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c409); }
                }
                if (s4 === peg$FAILED) {
                  if (input.substr(peg$currPos, 9) === peg$c410) {
                    s4 = peg$c410;
                    peg$currPos += 9;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c411); }
                  }
                  if (s4 === peg$FAILED) {
                    if (input.substr(peg$currPos, 10) === peg$c412) {
                      s4 = peg$c412;
                      peg$currPos += 10;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c413); }
                    }
                  }
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseline_terminator_sequence();
            if (s6 !== peg$FAILED) {
              peg$reportedPos = s5;
              s6 = peg$c399();
            }
            s5 = s6;
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseMSS();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetill_string_end();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s5;
                  s6 = peg$c400(s7);
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c414(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenodes_insertion() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s2 = peg$c359;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c360); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 12) === peg$c415) {
              s4 = peg$c415;
              peg$currPos += 12;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c416); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c417) {
                s4 = peg$c417;
                peg$currPos += 10;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c418); }
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetill_string_end();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c419(s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenode() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s2 = peg$c359;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c360); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c420) {
              s4 = peg$c420;
              peg$currPos += 4;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c421); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseMSS();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseIDENTIFIER();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetill_string_end();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c422(s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseendnode() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s2 = peg$c359;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c360); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c423) {
              s4 = peg$c423;
              peg$currPos += 7;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c424); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetill_string_end();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c425();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenodes_parameters() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s2 = peg$c359;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c360); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c426) {
              s4 = peg$c426;
              peg$currPos += 7;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c427); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c428) {
                s4 = peg$c428;
                peg$currPos += 8;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c429); }
              }
              if (s4 === peg$FAILED) {
                if (input.substr(peg$currPos, 10) === peg$c430) {
                  s4 = peg$c430;
                  peg$currPos += 10;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c431); }
                }
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseMSS();
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 8) === peg$c432) {
                  s7 = peg$c432;
                  peg$currPos += 8;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c433); }
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseMSS();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsefully_specified_type();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseMSS();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseIDENTIFIER();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c434(s4, s5, s7, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenode_var() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s2 = peg$c359;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c360); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c435) {
            s4 = peg$c435;
            peg$currPos += 8;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c436); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseMSS();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseIDENTIFIER();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetill_string_end();
                if (s7 !== peg$FAILED) {
                  s2 = [s2, s3, s4, s5, s6, s7];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c437(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseinclude_dir_comment() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s2 = peg$c359;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c360); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 11) === peg$c438) {
              s4 = peg$c438;
              peg$currPos += 11;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c439); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c440) {
                s4 = peg$c440;
                peg$currPos += 7;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c441); }
              }
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 37) {
                s5 = peg$c157;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c158); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$currPos;
                s8 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 37) {
                  s9 = peg$c157;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c158); }
                }
                peg$silentFails--;
                if (s9 === peg$FAILED) {
                  s8 = void 0;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s9 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c333); }
                  }
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$currPos;
                    s8 = peg$currPos;
                    peg$silentFails++;
                    if (input.charCodeAt(peg$currPos) === 37) {
                      s9 = peg$c157;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c158); }
                    }
                    peg$silentFails--;
                    if (s9 === peg$FAILED) {
                      s8 = void 0;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.length > peg$currPos) {
                        s9 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c333); }
                      }
                      if (s9 !== peg$FAILED) {
                        s8 = [s8, s9];
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  }
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 37) {
                    s7 = peg$c157;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c158); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c442(s4, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    { 

      var _RESERVED = [
        // use keywords from GLSL ES 1.0 only
        "const", "uniform", "break", "continue", "do", "for", "while", "if", "else", 
        "in", "out", "inout", "float", "int", "void", "bool", "lowp", "mediump", 
        "highp", "precision", "invariant", "discard", "return", "mat2", "mat3", "mat4", 
        "vec2", "vec3", "vec4", "ivec2", "ivec3", "ivec4", "bvec2", "bvec3", "bvec4", 
        "sampler2D", "samplerCube", "struct", 

        // additional custom or GLSL ES 3.0 keywords
        "GLSL_IN", "GLSL_OUT",

        // reserved for future use in (union of the GLSL ES 1.0 and GLSL ES 3.0 keywords)
        "attribute", "varying", "coherent", "restrict", "readonly", "writeonly", "resource", 
        "atomic_uint", "noperspective", "patch", "sample", "subroutine", "common", 
        "partition", "active", "asm", "class", "union", "enum", "typedef", "template", 
        "this", "packed", "goto", "switch", "default", "flat", "inline", "noinline", 
        "volatile", "public", "static", "extern", "external", "interface", "long", 
        "short", "double", "half", "fixed", "unsigned", "superp", "input", "output", 
        "hvec2", "hvec3", "hvec4", "dvec2", "dvec3", "dvec4", "fvec2", "fvec3", "fvec4", 
        "sampler3DRect", "filter", "image1D", "image2D", "image3D", "imageCube", 
        "iimage1D", "iimage2D", "iimage3D", "iimageCube", "uimage1D", "uimage2D", 
        "uimage3D", "uimageCube", "image1DArray", "image2DArray", "iimage1DArray", 
        "iimage2DArray", "uimage1DArray", "uimage2DArray", "image1DShadow", 
        "image2DShadow", "image1DArrayShadow", "image2DArrayShadow", "imageBuffer", 
        "iimageBuffer", "uimageBuffer", "sampler1D", "sampler1DShadow", 
        "sampler1DArray", "sampler1DArrayShadow", "isampler1D", "isampler1DArray", 
        "usampler1D", "usampler1DArray", "sampler2DRect", "sampler2DRectShadow", 
        "isampler2DRect", "usampler2DRect", "samplerBuffer", "isamplerBuffer", 
        "usamplerBuffer", "sampler2DMS", "isampler2DMS", "usampler2DMS", 
        "sampler2DMSArray", "isampler2DMSArray", "usampler2DMSArray", "sampler3D", 
        "sampler2DShadow", "sizeof", "cast", "namespace", "using"
      ];

      function token_is_reserved(token) {
        return (token.indexOf("__") > -1) || (_RESERVED.indexOf(token) > -1);
      }

      // NOTE: buggy for nontrivial usage of #define directives, e.g. cycle or 
      // chain substitutions 
      function vardef_replace(units) {
        var repl_non_node = {};
        var repl_all = {};

        for (var i = 0; i < units.length; i++) {
          var unit = units[i][0];

          if (unit.node == "directive") {
            switch(unit.type) {
              case "var":
              case "define":
                repl_non_node[unit.repl.from] = unit.repl.to;
                repl_all[unit.repl.from] = unit.repl.to;
                break;
              case "undef":
                delete repl_non_node[unit.identifier];
                delete repl_all[unit.identifier];
                break;
            }
          } else if (unit.node == "node_directive") {
            switch (unit.type) {
              case "node_var":
                repl_all[unit.repl.from] = unit.repl.to;
                break;
              case "endnode":
                repl_all = JSON.parse(JSON.stringify(repl_non_node));
                break;
            }
          } else if (unit.node == "text")
            for (var j = 0; j < unit.result.length; j++) {
              var token = unit.result[j];
              for (var from in repl_all)
                if (token == from) {
                  var to = vardef_recourse(repl_all[from], repl_all);
                  units[i][0].result[j] = "/*%replace%from%" + from 
                      + "%to%" + to + "%*/" + to + "/*%replace_end%*/";
                  break;
                }
          }
        }
        return units;
      }

      function vardef_recourse(text_to, repls) {
        for (var from in repls) {
          var to = repls[from];
          var expr_str = "(^|[^0-9a-zA-Z_])" + from + "([^0-9a-zA-Z_]|$)";
          var expr = new RegExp(expr_str, "g");
          text_to = text_to.replace(expr, "$1" + to + "$2");
        }

        return text_to;
      }

      function build_listing(units) {
        var listing = "";

        var nodes_collector = {
          current_node: null,
          nodes_structure: {},
        }

        for (var i = 0; i < units.length; i++) {
          var unit = units[i][0];

          // usual directives
          if (unit.node == "directive")
            listing += "/*%directive%" + unit.source_str + "%directive_end%*/\n";

          // includes
          else if (unit.node == "include")
            listing += "/*%" + unit.type + "%" + unit.name + "%*/\n";

          // simple textlines
          else if (unit.node == "text")
            listing += build_textline(unit, nodes_collector);

          // node directives
          else if (unit.node == "node_directive")
            listing += build_node_directive(unit, nodes_collector);
        }
        
        return listing;
      }



      function build_textline(unit, nodes_collector) {
        var listing = "";

        // collect textlines if they are inside a #node and append them 
        // later in #nodes_main
        if (nodes_collector.current_node != null)
          nodes_collector.nodes_structure[nodes_collector.current_node].push(unit);
        // append to lisitng immediately if textlines are outside a node
        else
          for (var i = 0; i < unit.result.length; i++)
            listing += unit.result[i];

        return listing;
      }

      function build_node_directive(unit, nodes_collector) {
        var listing = "";

        if (unit.type != "node" && unit.type != "endnode" && unit.type != "nodes_global" 
            && unit.type != "nodes_main" && nodes_collector.current_node == null) {
          console.error("Warning! Outlier directive #" + unit.type);
          return listing;
        }
        switch (unit.type) {
          case "node":
            listing += "/*%" + unit.type + "%" + unit.name + "%*/\n";
            nodes_collector.current_node = unit.name;
            nodes_collector.nodes_structure[nodes_collector.current_node] = [];
            break;
          case "endnode":
            listing += "/*%" + unit.type + "%*/\n";
            nodes_collector.current_node = null;
            break;

          case "node_in":
          case "node_out":
          case "node_param":
            nodes_collector.nodes_structure[nodes_collector.current_node].push(unit);
            break;
          case "node_var":
          case "node_condition":
            // do not move node_var/node_condition into nodes_main or nodes_global
            listing += "/*%" + unit.type + "%" + unit.source_str + "%" + 
                nodes_collector.current_node + "%" + unit.offset + "%*/\n";
            break;

          case "nodes_main":
            listing += build_nodes_main(nodes_collector.nodes_structure);
            break;
          case "nodes_global":
            listing += build_nodes_global(nodes_collector.nodes_structure);
            break;
        }
        return listing;
      }

      function build_nodes_main(nodes_structure) {
        var listing = "/*%nodes_main%*/\n";
        var new_scope = true;
        for (var node_name in nodes_structure) {
          var node = nodes_structure[node_name];
          for (var j = 0; j < node.length; j++)
            switch (node[j].type) {
              case "node_in":
              case "node_out":
                listing += build_node_in_out_param(node_name, node[j]);
                break;
              case "textline":
                if (new_scope) {
                  listing += "{";
                  new_scope = false;
                }
                listing += build_node_textline(node_name, node, node[j]);
                break;
            }

          if (!new_scope) {
            listing += "}";
            new_scope = true;
          }
        }
        listing += "/*%nodes_main_end%*/\n";

        return listing;
      }

      function build_nodes_global(nodes_structure) {
        var listing = "/*%nodes_global%*/\n";
        for (var node_name in nodes_structure) {
          var node = nodes_structure[node_name];

          for (var j = 0; j < node.length; j++)
            if (node[j].type == "node_param")
              listing += build_node_in_out_param(node_name, node[j]);
        }
        listing += "/*%nodes_global_end%*/\n";

        return listing;
      }

      function build_node_textline(node_name, node, ndir) {
        var listing = "/*%node_textline%" + node_name + "%*/";

        var text = "";
        for (var i = 0; i < ndir.result.length; i++)
          text += ndir.result[i];

        for (var i = 0; i < node.length; i++)
          if (node[i].type == "node_in" || node[i].type == "node_out" 
              || node[i].type == "node_param") {
            var name = "node_" + node_name + "_var_" + node[i].identifier.name;
            var expr_str = "([^0-9a-zA-Z_]|^)(" + node[i].identifier.name + ")(?![0-9a-zA-Z_])";
            var expr = new RegExp(expr_str, "gm");
            text = text.replace(expr, "$1" + name);
          }

        listing += text;
        listing += "/*%node_textline_end%" + ndir.offset + "%*/\n";
        return listing;
      }

      function build_node_in_out_param(node_name, ndir) {
        var listing = "/*%" + ndir.type + "%*/";

        if (ndir.decl_type.type_qualifier) {
          var value = ndir.decl_type.type_qualifier.value;
          if(value.constructor == Array)
            for (var i = 0; i < value.length; i++)
              listing += value[i].name + " ";
          else
            listing += value.name + " ";
        }

        if (ndir.decl_type.precision_qualifier)
          listing += ndir.decl_type.precision_qualifier.value.name + " ";
        listing += ndir.decl_type.type_specifier.name.name + " ";
        listing += "node_" + node_name + "_var_" + ndir.identifier.name + ";";
        listing += "/*%" + ndir.type + "_end%" + ndir.is_optional + "%";
        listing += node_name + "%" + ndir.offset + "%*/\n";

        return listing;
      }

      // GLSL parsing: read directives
      var _pp_node_with_node_condition = [];
      var _pp_vardef_identifiers = [];
      // {uid: node}
      var _uid_to_node = {};

      var _pp_insertions = {};
      var _pp_insertions_array = [];

      function check_directive_comment(symbols) {
        // check directive comment insertion
        var str = "";
        for (var i = 0; i < symbols.length; i++)
          str += symbols[i][1];
        str = str.trim();
        if (str.charAt(0) == "%") {
          check_directive(str) || check_replace(str) || check_node_insertion(str)
          || check_node_borders(str) || check_node_parameters(str) || check_node_condition(str)
          || check_node_var(str) || check_include(str);
        }
      }

      function check_directive(str) {
        var expr = /^%directive%(.*?)%directive_end%/i;
        var res = expr.exec(str);
        if (res) {
          _pp_insertions[offset()] = "\n/*" + str + "*/\n";
          return check_directive_vardef(res[1]);
        }
        return false;
      }

      function check_directive_vardef(str) {
        var expr = /^ *?# *?(define|var) *?([0-9a-z_]+)/i;
        var res = expr.exec(str);
        if (res) {
          if (_pp_vardef_identifiers.indexOf(res[2]) == -1)
            _pp_vardef_identifiers.push(res[2]);
          return true;
        }
        return false;
      }

      function check_replace(str) {
        var expr = /^%replace((_end)|(%from%.*?%to%.*?))%$/i;
        var res = expr.exec(str);
        if (res) {
          _pp_insertions[offset()] = " /*" + str + "*/ ";
          return true;
        }
        return false;
      }

      function check_node_insertion(str) {
        var expr = /^%(nodes_global|nodes_main)(_end)?%$/i;
        var res = expr.exec(str);
        if (res) {
          _pp_insertions[offset()] = "\n/*" + str + "*/\n";
          return true;
        }
        return false;
      }

      function check_node_borders(str) {
        var expr = /^%((node%.*?)|endnode)%$/i;
        var res = expr.exec(str);
        if (res) {
          _pp_insertions[offset()] = "\n/*" + str + "*/\n";
          return true;
        }
        return false; 
      }

      function check_node_parameters(str) {
        var expr = /^%(node_in|node_out|node_param|node_textline)(_end)?.*?%$/i;
        var res = expr.exec(str);

        if (res) {
          _pp_insertions[offset()] = "\n/*" + str + "*/\n";
          return true;
        }
        return false; 
      }

      function check_node_condition(str) {
        var expr = /^%node_condition.*?%$/i;
        var res = expr.exec(str);

        if (res) {
          _pp_insertions[offset()] = "\n/*" + str + "*/\n";
          return true;
        }
        return false; 
      }

      function check_node_var(str) {
        var expr = /^%node_var%#node_var *?([0-9a-z_]+)/i;
        var res = expr.exec(str);
        if (res) {
          _pp_insertions[offset()] = "\n/*" + str + "*/\n";
          if (_pp_vardef_identifiers.indexOf(res[1]) == -1)
            _pp_vardef_identifiers.push(res[1]);
          return true;
        }
        return false;
      }

      function check_include(str) {
        var expr = /^%(include|include_end)%(.*?)%$/;
        var res = expr.exec(str);
        if (res) {
          _pp_insertions[offset()] = "\n/*" + str + "*/\n";
          return true;
        }
        return false;
      }

     


      // GLSL parsing: generate special nodes
      if (options.init_node_uid)
        var _node_uid = options.init_node_uid;
      else
        var _node_uid = 0;

      function flat_array(data) {
        var flat = [];

        for (var prop in data)
          if (data[prop])
            if (data[prop].constructor == Array)
              flat.push.apply(flat, flat_array(data[prop]));
            else if (data[prop].constructor == Object)
              flat.push(data[prop]);
        return flat;
      }

      function get_children_with_uid(parent) {
        var result = [];
        var children = flat_array(parent);
        while (children.length > 0) {
          var child = children.pop();

          if ("uid" in child)
            result.push(child);
          else
            children.push.apply(children, flat_array(child));
        }
        return result;
      }

      function common_node(data) {
        data.offset = offset();
        data.uid = _node_uid++;
        data.before_comments = [];

        return data;
      }

      function punctuation_node(type, data) {
        return common_node({
          node: "punctuation_node",
          type: type,
          data: data
        });
      }

      function keyword_node(name) {
        return common_node({
          node: "keyword_node",
          name: name
        });
      }

      function operation_node(type, data) {
        return common_node({
          node: "operation_node",
          type: type,
          data: data
        });
      }

      function binary_chain_node(node_name, first, others) {
        var chain_node = common_node({
          node: node_name,
          left: first
        });

        for (var i = 0; i < others.length; i++) {
          chain_node.operator = others[i][0];
          chain_node.right = others[i][1];

          if (i != others.length - 1)
            chain_node = common_node({
              node: node_name,
              left: chain_node
            });

        }
        return common_node(chain_node);
      }

      function unary_chain_node(node_name, expression, operations) {
        var chain_node = common_node({
          node: node_name,
          expression: expression
        });

        for (var i = 0; i < operations.length; i++) {
          chain_node.operator = operations[i];

          if (i != operations.length - 1)
            chain_node = common_node({
              node: node_name,
              expression: chain_node
            });
        }
        return common_node(chain_node);
      }

      function parenting_unit(ast) {
        var nodes = [ast];
        // {offset: [nodes]}
        var offset_to_nodes = {};
        while (nodes.length > 0) {
          var node = nodes.pop();
          var children = get_children_with_uid(node);

          _uid_to_node[node.uid] = node;
          
          for (var l in children)
            children[l].parent_uid = node.uid;

          nodes.push.apply(nodes, children);

          if (!offset_to_nodes[node.offset])
            offset_to_nodes[node.offset] = [];
          offset_to_nodes[node.offset].push(node.uid);
        }

        // NOTE: _pp_insertions object is very slow in the following code, so using
        // the array instead
        for (var offset in _pp_insertions)
          _pp_insertions_array.push([offset, _pp_insertions[offset]]);

        for (var i in offset_to_nodes) {
          for (var j in offset_to_nodes[i]) {
            var node_uid = offset_to_nodes[i][j];
            if (node_uid in _uid_to_node) {
              var node = _uid_to_node[node_uid];
              // HACK: don't add before_comments to statement_list
              if (node.node != "statement_list") {
                var splice_count = 0;
                for (var k = 0; k < _pp_insertions_array.length; k++) {
                  var offset = _pp_insertions_array[k][0];
                  var insert_str = _pp_insertions_array[k][1];

                  if (offset < node.offset) {
                    node.before_comments.push(insert_str);

                    var expr = /\/\*%node_condition.*?%\*\//i;
                    var res = expr.exec(insert_str);
                    if (res && 
                        (_pp_node_with_node_condition.indexOf(node_uid) == -1))
                      _pp_node_with_node_condition.push(node_uid);
                    splice_count = k + 1;
                  } else
                    break;
                }

                _pp_insertions_array.splice(0, splice_count);

              }
            }
          }
        }
        return ast;
      }
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
